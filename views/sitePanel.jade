//- controlPanel.jade
extends ./layout

block body
	.container
		.col-sm-12
			h1= title
			p Welcome to #{title}

		.col-md-12
			h2 The Sites
			table.table.table-striped
				thead
					tr
						th Port
						th Root Directory
						th Cloudflare
				tbody
					tr
						td=data.port
						td=data.root
						td=data.cloudflare_enabled
			p.strong Nginx Config
			pre=data.nginx_config

			p=url

			a.btn.btn-danger(href='/site/delete/'+data.url) Delete site
		.col-sm-12
			h2 Google Pagespeed
		.col-sm-6.col-lg-4.pagespeed
			h3 Mobile
			.mobile
		.col-sm-6.col-lg-4.pagespeed
			h3 Desktop
			.desktop
		.col-sm-6.col-lg-4.pagespeed
			h3 Resource Size
			.resource-chart
			table.resource-size.table.table-striped
				thead
				tbody
		.col-sm-6.col-lg-4.pagespeed
			h3 Resource Count
			table.resource-count.table.table-striped
				thead
				tbody
		.col-sm-6.col-lg-4.pagespeed
			h3 Suggestions
			.suggestions

	script.
		// Specify your actual API key here:
		var API_KEY = 'AIzaSyAIB3SXYprhRG-BI5xlhvaDdRgKkt1yIsM';

		// Specify the URL you want PageSpeed results for here:
		var URL_TO_GET_RESULTS_FOR = 'http://!{data.url}';

		var API_URL = 'https://www.googleapis.com/pagespeedonline/v1/runPagespeed?';
		var CHART_API_URL = 'http://chart.apis.google.com/chart?';

		// Object that will hold the callbacks that process results from the
		// PageSpeed Insights API.
		var callbacks = {};

		function addRow( label, stat ) {
			var $element = $('<tr>');
			$element.append( $('<td>').text( label ) );
			$element.append( $('<td>').text( stat ) );
			$('.pagespeed .resource-count tbody').append( $element );
		}

		// Invokes the PageSpeed Insights API. The response will contain
		// JavaScript that invokes our callback with the PageSpeed results.
		function runPagespeed( type ) {
			console.log( type );
			var s = document.createElement('script');
			s.type = 'text/javascript';
			s.async = true;
			if( type === 'mobile' ) {
				callbackName = 'runMobilePagespeedCallbacks';
			}
			else {
				callbackName = 'runDesktopPagespeedCallbacks';
			}
			var query = [
				'url=' + URL_TO_GET_RESULTS_FOR,
				'callback=' + callbackName,
				'key=' + API_KEY,
				'strategy=' + type
			].join('&');
			s.src = API_URL + query;
			document.head.insertBefore(s, null);
		}

		// Our JSONP callback. Checks for errors, then invokes our callback handlers.
		function runDesktopPagespeedCallbacks(result) {
			if (result.error) {
				var errors = result.error.errors;
				for (var i = 0, len = errors.length; i < len; ++i) {
					if (errors[i].reason == 'badRequest' && API_KEY == 'yourAPIKey') {
						alert('Please specify your Google API key in the API_KEY variable.');
					} else {
						// NOTE: your real production app should use a better
						// mechanism than alert() to communicate the error to the user.
						alert(errors[i].message);
					}
				}
				return;
			}
			callbacks.displayPageSpeedScore( result, 'desktop' );
			callbacks.displayResourceSizeBreakdown( result );
			callbacks.displayTopPageSpeedSuggestions( result );
		}

		// Our JSONP callback. Checks for errors, then invokes our callback handlers.
		function runMobilePagespeedCallbacks(result) {
			if (result.error) {
				var errors = result.error.errors;
				for (var i = 0, len = errors.length; i < len; ++i) {
					if (errors[i].reason == 'badRequest' && API_KEY == 'yourAPIKey') {
						alert('Please specify your Google API key in the API_KEY variable.');
					} else {
						// NOTE: your real production app should use a better
						// mechanism than alert() to communicate the error to the user.
						alert(errors[i].message);
					}
				}
				return;
			}
			callbacks.displayPageSpeedScore( result, 'mobile' );
		}

		callbacks.displayPageSpeedScore = function( result, type ) {
			var score = result.score;
			// Construct the query to send to the Google Chart Tools.
			var query = [
				'chtt=Page+Speed+score:+' + score,
				'chs=280x200',
				'cht=gom',
				'chd=t:' + score,
				'chxt=x,y',
				'chxl=0:|' + score,
			].join('&');
			var i = document.createElement('img');
			i.src = CHART_API_URL + query;
			console.log( i );
			$('.pagespeed .' + type).append(i);
			//- document.body.insertBefore(i, null);
		};

		callbacks.displayTopPageSpeedSuggestions = function(result) {
			var results = [];
			var ruleResults = result.formattedResults.ruleResults;
			for (var i in ruleResults) {
				var ruleResult = ruleResults[i];
				// Don't display lower-impact suggestions.
				if (ruleResult.ruleImpact < 3.0) continue;
				results.push({name: ruleResult.localizedRuleName,
											impact: ruleResult.ruleImpact});
			}
			results.sort(sortByImpact);
			var ul = document.createElement('ul');
			for (var i = 0, len = results.length; i < len; ++i) {
				var r = document.createElement('li');
				r.innerHTML = results[i].name;
				ul.insertBefore(r, null);
			}
			if (ul.hasChildNodes()) {
				//- document.body.insertBefore(ap, null);
				$('.pagespeed .suggestions').append( ul );
			} else {
				var div = document.createElement('div');
				div.innerHTML = 'No high impact suggestions. Good job!';
				//- document.body.insertBefore(div, null);
				$('.pagespeed .suggestions').append( div );
			}
		};

		// Helper function that sorts results in order of impact.
		function sortByImpact(a, b) { return b.impact - a.impact; }

		var RESOURCE_TYPE_INFO = [
			{label: 'JavaScript', field: 'javascriptResponseBytes', color: 'e2192c'},
			{label: 'Images', field: 'imageResponseBytes', color: 'f3ed4a'},
			{label: 'CSS', field: 'cssResponseBytes', color: 'ff7008'},
			{label: 'HTML', field: 'htmlResponseBytes', color: '43c121'},
			{label: 'Flash', field: 'flashResponseBytes', color: 'f8ce44'},
			{label: 'Text', field: 'textResponseBytes', color: 'ad6bc5'},
			{label: 'Other', field: 'otherResponseBytes', color: '1051e8'},
		];

		callbacks.displayResourceSizeBreakdown = function( result ) {
			var stats = result.pageStats;
			var labels = [];
			var data = [];
			var colors = [];
			var totalBytes = 0;
			var largestSingleCategory = 0;

			addRow( 'Hosts', stats['numberHosts'] );
			addRow( 'Javascripts', stats['numberJsResources'] );
			addRow( 'Stylesheets', stats['numberCssResources'] );
			addRow( 'Static Resources', stats['numberStaticResources'] );
			addRow( 'Total Resources', stats['numberResources'] );

			for (var i = 0, len = RESOURCE_TYPE_INFO.length; i < len; ++i) {
				console.log( RESOURCE_TYPE_INFO[i] );
				var label = RESOURCE_TYPE_INFO[i].label;
				var field = RESOURCE_TYPE_INFO[i].field;
				var color = RESOURCE_TYPE_INFO[i].color;
				if (field in stats) {
					var val = Number(stats[field]);
					totalBytes += val;
					if (val > largestSingleCategory) largestSingleCategory = val;
					labels.push(label);
					data.push(val);
					colors.push(color);
					var $element = $('<tr>');
					$element.append(
						$('<td>')
							.text( label )
							.css( 'color', '#' + RESOURCE_TYPE_INFO[i].color )
					)
					$element.append( $('<td>').text( val + ' bytes' ) )
					$('.pagespeed .resource-size tbody').append( $element )
				}
			}

			// Construct the query to send to the Google Chart Tools.
			var query = [
				'chs=300x140',
				'cht=p3',
				'chts=' + ['000000', 16].join(','),
				'chco=' + colors.join('|'),
				'chd=t:' + data.join(','),
				'chdl=' + labels.join('|'),
				'chdls=000000,14',
				'chp=1.6',
				'chds=0,' + largestSingleCategory,
			].join('&');
			var i = document.createElement('img');
			i.src = 'http://chart.apis.google.com/chart?' + query;
			document.body.insertBefore(i, null);
			$('.pagespeed .resource-chart').append(i);
		};

		// Invoke the callback that fetches results. Async here so we're sure
		// to discover any callbacks registered below, but this can be
		// synchronous in your code.
		setTimeout(function() {
			runPagespeed('mobile');
			runPagespeed('desktop');
		}, 0);